// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: internal/proto/octo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Octo_SendArray_FullMethodName        = "/myproto.Octo/SendArray"
	Octo_GetArray_FullMethodName         = "/myproto.Octo/GetArray"
	Octo_StreamFile_FullMethodName       = "/myproto.Octo/StreamFile"
	Octo_ServerStreamFile_FullMethodName = "/myproto.Octo/ServerStreamFile"
)

// OctoClient is the client API for Octo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OctoClient interface {
	SendArray(ctx context.Context, in *SendArrayRequest, opts ...grpc.CallOption) (*SendArrayResponse, error)
	GetArray(ctx context.Context, in *GetArrayRequest, opts ...grpc.CallOption) (*GetArrayResponse, error)
	StreamFile(ctx context.Context, opts ...grpc.CallOption) (Octo_StreamFileClient, error)
	ServerStreamFile(ctx context.Context, in *FileStreamServerRequest, opts ...grpc.CallOption) (Octo_ServerStreamFileClient, error)
}

type octoClient struct {
	cc grpc.ClientConnInterface
}

func NewOctoClient(cc grpc.ClientConnInterface) OctoClient {
	return &octoClient{cc}
}

func (c *octoClient) SendArray(ctx context.Context, in *SendArrayRequest, opts ...grpc.CallOption) (*SendArrayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendArrayResponse)
	err := c.cc.Invoke(ctx, Octo_SendArray_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octoClient) GetArray(ctx context.Context, in *GetArrayRequest, opts ...grpc.CallOption) (*GetArrayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArrayResponse)
	err := c.cc.Invoke(ctx, Octo_GetArray_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *octoClient) StreamFile(ctx context.Context, opts ...grpc.CallOption) (Octo_StreamFileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Octo_ServiceDesc.Streams[0], Octo_StreamFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &octoStreamFileClient{ClientStream: stream}
	return x, nil
}

type Octo_StreamFileClient interface {
	Send(*FileRequest) error
	CloseAndRecv() (*FileResponse, error)
	grpc.ClientStream
}

type octoStreamFileClient struct {
	grpc.ClientStream
}

func (x *octoStreamFileClient) Send(m *FileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *octoStreamFileClient) CloseAndRecv() (*FileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *octoClient) ServerStreamFile(ctx context.Context, in *FileStreamServerRequest, opts ...grpc.CallOption) (Octo_ServerStreamFileClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Octo_ServiceDesc.Streams[1], Octo_ServerStreamFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &octoServerStreamFileClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Octo_ServerStreamFileClient interface {
	Recv() (*FileStreamServerResponse, error)
	grpc.ClientStream
}

type octoServerStreamFileClient struct {
	grpc.ClientStream
}

func (x *octoServerStreamFileClient) Recv() (*FileStreamServerResponse, error) {
	m := new(FileStreamServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OctoServer is the server API for Octo service.
// All implementations must embed UnimplementedOctoServer
// for forward compatibility
type OctoServer interface {
	SendArray(context.Context, *SendArrayRequest) (*SendArrayResponse, error)
	GetArray(context.Context, *GetArrayRequest) (*GetArrayResponse, error)
	StreamFile(Octo_StreamFileServer) error
	ServerStreamFile(*FileStreamServerRequest, Octo_ServerStreamFileServer) error
	mustEmbedUnimplementedOctoServer()
}

// UnimplementedOctoServer must be embedded to have forward compatible implementations.
type UnimplementedOctoServer struct {
}

func (UnimplementedOctoServer) SendArray(context.Context, *SendArrayRequest) (*SendArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendArray not implemented")
}
func (UnimplementedOctoServer) GetArray(context.Context, *GetArrayRequest) (*GetArrayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArray not implemented")
}
func (UnimplementedOctoServer) StreamFile(Octo_StreamFileServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFile not implemented")
}
func (UnimplementedOctoServer) ServerStreamFile(*FileStreamServerRequest, Octo_ServerStreamFileServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamFile not implemented")
}
func (UnimplementedOctoServer) mustEmbedUnimplementedOctoServer() {}

// UnsafeOctoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OctoServer will
// result in compilation errors.
type UnsafeOctoServer interface {
	mustEmbedUnimplementedOctoServer()
}

func RegisterOctoServer(s grpc.ServiceRegistrar, srv OctoServer) {
	s.RegisterService(&Octo_ServiceDesc, srv)
}

func _Octo_SendArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctoServer).SendArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Octo_SendArray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctoServer).SendArray(ctx, req.(*SendArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Octo_GetArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArrayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OctoServer).GetArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Octo_GetArray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OctoServer).GetArray(ctx, req.(*GetArrayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Octo_StreamFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OctoServer).StreamFile(&octoStreamFileServer{ServerStream: stream})
}

type Octo_StreamFileServer interface {
	SendAndClose(*FileResponse) error
	Recv() (*FileRequest, error)
	grpc.ServerStream
}

type octoStreamFileServer struct {
	grpc.ServerStream
}

func (x *octoStreamFileServer) SendAndClose(m *FileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *octoStreamFileServer) Recv() (*FileRequest, error) {
	m := new(FileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Octo_ServerStreamFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileStreamServerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OctoServer).ServerStreamFile(m, &octoServerStreamFileServer{ServerStream: stream})
}

type Octo_ServerStreamFileServer interface {
	Send(*FileStreamServerResponse) error
	grpc.ServerStream
}

type octoServerStreamFileServer struct {
	grpc.ServerStream
}

func (x *octoServerStreamFileServer) Send(m *FileStreamServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Octo_ServiceDesc is the grpc.ServiceDesc for Octo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Octo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myproto.Octo",
	HandlerType: (*OctoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendArray",
			Handler:    _Octo_SendArray_Handler,
		},
		{
			MethodName: "GetArray",
			Handler:    _Octo_GetArray_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFile",
			Handler:       _Octo_StreamFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamFile",
			Handler:       _Octo_ServerStreamFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/octo.proto",
}

const (
	Auth_Login_FullMethodName        = "/myproto.Auth/Login"
	Auth_Registration_FullMethodName = "/myproto.Auth/Registration"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponce, error)
	Registration(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*RegResponce, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponce)
	err := c.cc.Invoke(ctx, Auth_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Registration(ctx context.Context, in *RegRequest, opts ...grpc.CallOption) (*RegResponce, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegResponce)
	err := c.cc.Invoke(ctx, Auth_Registration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponce, error)
	Registration(context.Context, *RegRequest) (*RegResponce, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Login(context.Context, *LoginRequest) (*LoginResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) Registration(context.Context, *RegRequest) (*RegResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Registration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Registration(ctx, req.(*RegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myproto.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Registration",
			Handler:    _Auth_Registration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/octo.proto",
}
